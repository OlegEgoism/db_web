# Generated by Django 4.1 on 2025-04-06 10:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, verbose_name='Имя пользователя')),
                ('action_type', models.CharField(choices=[('create', 'Создание'), ('update', 'Обновление'), ('delete', 'Удаление'), ('register', 'Регистрация'), ('download', 'Скачивание'), ('info', 'Информация')], max_length=10, verbose_name='Тип действия')),
                ('entity_type', models.CharField(choices=[('user', 'Пользователь'), ('group', 'Группа'), ('database', 'База данных'), ('other', 'Другое'), ('session', 'Сессия'), ('settings', 'Настройки')], max_length=10, verbose_name='Тип объекта')),
                ('entity_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Имя объекта')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Подробности')),
            ],
            options={
                'verbose_name': 'Журнал действий',
                'verbose_name_plural': 'Журнал действий',
            },
        ),
        migrations.CreateModel(
            name='ConnectingDB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('name_db', models.CharField(max_length=150, unique=True, verbose_name='Название базы данных')),
                ('user_db', models.CharField(max_length=150, verbose_name='Пользователь')),
                ('password_db', models.CharField(max_length=150, verbose_name='Пароль')),
                ('host_db', models.CharField(max_length=150, verbose_name='Хост')),
                ('port_db', models.CharField(max_length=150, verbose_name='Порт')),
            ],
            options={
                'verbose_name': 'Подключение к базе данных',
                'verbose_name_plural': 'Подключение к базе данных',
            },
        ),
        migrations.CreateModel(
            name='GroupLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('groupname', models.CharField(max_length=100, unique=True, verbose_name='Имя группы')),
            ],
            options={
                'verbose_name': '- Группа в базе данных',
                'verbose_name_plural': '- Группы в базе данных',
            },
        ),
        migrations.CreateModel(
            name='SettingsProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('pagination_size', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)], verbose_name='Размер пагинации на странице')),
                ('send_email', models.BooleanField(default=True, verbose_name='Отправка сообщений на почту')),
            ],
            options={
                'verbose_name': 'Настройка проекта',
                'verbose_name_plural': 'Настройка проекта',
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Имя пользователя')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Почта')),
                ('can_create_db', models.BooleanField(default=False, verbose_name='Может создавать БД')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Суперпользователь')),
                ('inherit', models.BooleanField(default=False, verbose_name='Наследование')),
                ('create_role', models.BooleanField(default=False, verbose_name='Право создания роли')),
                ('login', models.BooleanField(default=True, verbose_name='Право входа')),
                ('replication', models.BooleanField(default=False, verbose_name='Право репликации')),
                ('bypass_rls', models.BooleanField(default=False, verbose_name='Bypass RLS')),
            ],
            options={
                'verbose_name': '- Пользователь в базе данных',
                'verbose_name_plural': '- Пользователи в базе данных',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, default='user_photo/default.png', null=True, upload_to='user_photo/', verbose_name='Фото')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Администратор',
                'verbose_name_plural': 'Администраторы',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
